[
  {
    "objectID": "backend/uml.html",
    "href": "backend/uml.html",
    "title": "UML",
    "section": "",
    "text": "Introduction\n\n\n\n\n\n\nTODO: Pending to populate this entry"
  },
  {
    "objectID": "backend/rest-api-controllers.html",
    "href": "backend/rest-api-controllers.html",
    "title": "REST API controllers",
    "section": "",
    "text": "TODO: write an introduction to this entry\n\n\n\n\n\n\n\n\n\n\nuserRestController.java\n\npackage org.teamcifo.tindergames.userRestController;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameService;\nimport org.teamcifo.tindergames.userEntity.User;\nimport org.teamcifo.tindergames.userEntity.UserService;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class userRestController {\n\n    @Autowired\n    UserService userService;\n    @Autowired\n    BoardGameService boardGameService;\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping({\"/\", \"\"})\n    public Iterable&lt;User&gt; getAllUsers(){\n        return userService.getAllUsers();\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"username/{username}\")\n    public User getUserByUsername(@PathVariable String username){\n        Optional&lt;User&gt; user = Optional.ofNullable(userService.getUserByUsername(username));\n        if (user.isPresent()){\n            return user.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"userID/{userID}\")\n    public User getUserByUserID(@PathVariable String userID){\n        Optional&lt;User&gt; user = Optional.ofNullable(userService.getUserByID(userID));\n        if (user.isPresent()){\n            return user.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(path=\"createUser\", consumes = \"application/JSON\")\n    public Boolean createUser(@RequestBody User user){\n        if(userService.addUserToDB(user)){\n            userService.addUserToDB(user);\n            return true;\n        }\n        return false;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"updateUser\")\n    public ResponseEntity&lt;User&gt; updateUser(@RequestBody User user){\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"updateUser\");\n        headers.add(\"version\", \"api 1.0\");\n        Optional&lt;User&gt; userToUpdate= Optional.ofNullable(userService.getUserByID(user.getUserId()));\n\n        if (userToUpdate.isPresent()){\n            userService.updateUserInDB(user);\n            headers.add(\"operationStatus\", \"updated\");\n            return  ResponseEntity.accepted().headers(headers).body(userService.getUserByID(user.getUserId()));\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteUser\")\n    public ResponseEntity&lt;Boolean&gt; deleteUser(@RequestParam(\"userID\") String userID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteUser\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFound = Optional.ofNullable(userService.getUserByID(userID));\n        if (userFound.isPresent()){\n            userService.deleteUserFromDB(userFound.get());\n            headers.add(\"operationStatus\", \"user deleted\");\n            return ResponseEntity.accepted().headers(headers).body(true);\n        }\n        return ResponseEntity.accepted().headers(headers).body(false);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteFriend\")\n    public ResponseEntity&lt;Boolean&gt; deleteFriend(@RequestParam(\"userID\") String userID, @RequestParam(\"friendID\") String friendID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteFriend\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFound = Optional.ofNullable(userService.getUserByID(userID));\n        if (userFound.isPresent()){\n            userService.deleteFriend(userID, friendID, userFound.get().getFriends());\n            return ResponseEntity.accepted().headers(headers).body(true);\n\n        }\n        return ResponseEntity.accepted().headers(headers).body(false);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"addFriends\")\n    public ResponseEntity&lt;User&gt; addFriend(@RequestParam(\"userID\") String userID, @RequestParam(\"friendsIds\") List&lt;String&gt; friendsIds){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"addFriend\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFormDB = Optional.ofNullable(userService.getUserByID(userID));\n        if(userFormDB.isPresent()){\n            userService.addFriends(userFormDB.get().getUserId(), friendsIds);\n            return ResponseEntity.accepted().headers(headers).body(userFormDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"addGameToCollection\")\n    public ResponseEntity&lt;User&gt; addGameToCollection(@RequestParam(\"userID\") String userID, @RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"addGameToUserCollection\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFromDB = Optional.ofNullable(userService.getUserByID(userID));\n        Optional&lt;BoardGame&gt; gameFromDB = Optional.ofNullable(boardGameService.getGameByID(gameID));\n        if (userFromDB.isPresent() && gameFromDB.isPresent()){\n            userFromDB.get().addGameToCollection(gameFromDB.get());\n            updateUser(userFromDB.get());\n            return ResponseEntity.accepted().headers(headers).body(userFromDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"deleteGameFromCollection\")\n    public ResponseEntity&lt;User&gt; deleteGameFromCollection(@RequestParam(\"userID\") String userID, @RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteGameFromCollection\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFromDB = Optional.ofNullable(userService.getUserByID(userID));\n        Optional&lt;BoardGame&gt; gameFromDB = Optional.ofNullable(boardGameService.getGameByID(gameID));\n        if (userFromDB.isPresent() && gameFromDB.isPresent()){\n            userFromDB.get().deleteGameFromCollection(gameFromDB.get());\n            updateUser(userFromDB.get());\n            return ResponseEntity.accepted().headers(headers).body(userFromDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(\"login\")\n    public ResponseEntity&lt;User&gt; login(@RequestParam(\"username\")String username, @RequestParam(\"password\")String password){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"login\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; loginUser = Optional.ofNullable(userService.logIn(username, password));\n        if(loginUser.isPresent()){\n            return ResponseEntity.accepted().headers(headers).body(loginUser.get());\n        }\n\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n}\n// https://stackoverflow.com/questions/34946237/how-delete-object-in-one-side-at-bidirectional-relation\n\n\n\n\n\n\nBoardGameRestController.java\n\npackage org.teamcifo.tindergames.boardGameRestController;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameController;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameService;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/boardgames\")\npublic class BoardGameRestController {\n\n    @Autowired\n    BoardGameService gameService;\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping({\"/\", \"\"})\n    public Iterable&lt;BoardGame&gt; getAllGames(){\n        return gameService.getAllBoardGames();\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"title/{gameTitle}\")\n    public BoardGame getGameByTitle(@PathVariable String gameTitle){\n        Optional&lt;BoardGame&gt; game = Optional.ofNullable(gameService.getGameByGameTitle(gameTitle));\n        if (game.isPresent()){\n            return game.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"id/{gameID}\")\n    public BoardGame getGameByID(@PathVariable String gameID){\n        Optional&lt;BoardGame&gt; game = Optional.ofNullable(gameService.getGameByID(gameID));\n        if (game.isPresent()){\n            return game.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(path=\"createGame\", consumes = \"application/JSON\")\n    public BoardGame createGame(@RequestBody BoardGame game){\n        BoardGame newGame = gameService.createGame(game);\n        return newGame;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteGame\")\n    public ResponseEntity&lt;BoardGame&gt; deleteGame(@RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteGame\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;BoardGame&gt; gameFound = Optional.ofNullable(gameService.getGameByID(gameID));\n        if (gameFound.isPresent()){\n            gameService.deleteGameFromDB(gameFound.get());\n            headers.add(\"operationStatus\", \"deleted\");\n            return ResponseEntity.accepted().headers(headers).body(gameFound.get());\n        }\n        return ResponseEntity.accepted().body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"updateGame\")\n    public ResponseEntity&lt;BoardGame&gt; updateGame(@RequestBody BoardGame game){\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"updateGame\");\n        headers.add(\"version\", \"api 1.0\");\n        Optional&lt;BoardGame&gt; gameFromDB= Optional.ofNullable(gameService.getGameByID(game.getGameID()));\n\n        if (gameFromDB.isPresent()){\n            gameService.updateGameFromDB(game);\n            headers.add(\"operationStatus\", \"updated\");\n            return  ResponseEntity.accepted().headers(headers).body(gameService.getGameByID(game.getGameID()));\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n}"
  },
  {
    "objectID": "backend/rest-api-controllers.html#userrestcontroller",
    "href": "backend/rest-api-controllers.html#userrestcontroller",
    "title": "REST API controllers",
    "section": "",
    "text": "userRestController.java\n\npackage org.teamcifo.tindergames.userRestController;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameService;\nimport org.teamcifo.tindergames.userEntity.User;\nimport org.teamcifo.tindergames.userEntity.UserService;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class userRestController {\n\n    @Autowired\n    UserService userService;\n    @Autowired\n    BoardGameService boardGameService;\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping({\"/\", \"\"})\n    public Iterable&lt;User&gt; getAllUsers(){\n        return userService.getAllUsers();\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"username/{username}\")\n    public User getUserByUsername(@PathVariable String username){\n        Optional&lt;User&gt; user = Optional.ofNullable(userService.getUserByUsername(username));\n        if (user.isPresent()){\n            return user.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"userID/{userID}\")\n    public User getUserByUserID(@PathVariable String userID){\n        Optional&lt;User&gt; user = Optional.ofNullable(userService.getUserByID(userID));\n        if (user.isPresent()){\n            return user.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(path=\"createUser\", consumes = \"application/JSON\")\n    public Boolean createUser(@RequestBody User user){\n        if(userService.addUserToDB(user)){\n            userService.addUserToDB(user);\n            return true;\n        }\n        return false;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"updateUser\")\n    public ResponseEntity&lt;User&gt; updateUser(@RequestBody User user){\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"updateUser\");\n        headers.add(\"version\", \"api 1.0\");\n        Optional&lt;User&gt; userToUpdate= Optional.ofNullable(userService.getUserByID(user.getUserId()));\n\n        if (userToUpdate.isPresent()){\n            userService.updateUserInDB(user);\n            headers.add(\"operationStatus\", \"updated\");\n            return  ResponseEntity.accepted().headers(headers).body(userService.getUserByID(user.getUserId()));\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteUser\")\n    public ResponseEntity&lt;Boolean&gt; deleteUser(@RequestParam(\"userID\") String userID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteUser\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFound = Optional.ofNullable(userService.getUserByID(userID));\n        if (userFound.isPresent()){\n            userService.deleteUserFromDB(userFound.get());\n            headers.add(\"operationStatus\", \"user deleted\");\n            return ResponseEntity.accepted().headers(headers).body(true);\n        }\n        return ResponseEntity.accepted().headers(headers).body(false);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteFriend\")\n    public ResponseEntity&lt;Boolean&gt; deleteFriend(@RequestParam(\"userID\") String userID, @RequestParam(\"friendID\") String friendID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteFriend\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFound = Optional.ofNullable(userService.getUserByID(userID));\n        if (userFound.isPresent()){\n            userService.deleteFriend(userID, friendID, userFound.get().getFriends());\n            return ResponseEntity.accepted().headers(headers).body(true);\n\n        }\n        return ResponseEntity.accepted().headers(headers).body(false);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"addFriends\")\n    public ResponseEntity&lt;User&gt; addFriend(@RequestParam(\"userID\") String userID, @RequestParam(\"friendsIds\") List&lt;String&gt; friendsIds){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"addFriend\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFormDB = Optional.ofNullable(userService.getUserByID(userID));\n        if(userFormDB.isPresent()){\n            userService.addFriends(userFormDB.get().getUserId(), friendsIds);\n            return ResponseEntity.accepted().headers(headers).body(userFormDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"addGameToCollection\")\n    public ResponseEntity&lt;User&gt; addGameToCollection(@RequestParam(\"userID\") String userID, @RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"addGameToUserCollection\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFromDB = Optional.ofNullable(userService.getUserByID(userID));\n        Optional&lt;BoardGame&gt; gameFromDB = Optional.ofNullable(boardGameService.getGameByID(gameID));\n        if (userFromDB.isPresent() && gameFromDB.isPresent()){\n            userFromDB.get().addGameToCollection(gameFromDB.get());\n            updateUser(userFromDB.get());\n            return ResponseEntity.accepted().headers(headers).body(userFromDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"deleteGameFromCollection\")\n    public ResponseEntity&lt;User&gt; deleteGameFromCollection(@RequestParam(\"userID\") String userID, @RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteGameFromCollection\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; userFromDB = Optional.ofNullable(userService.getUserByID(userID));\n        Optional&lt;BoardGame&gt; gameFromDB = Optional.ofNullable(boardGameService.getGameByID(gameID));\n        if (userFromDB.isPresent() && gameFromDB.isPresent()){\n            userFromDB.get().deleteGameFromCollection(gameFromDB.get());\n            updateUser(userFromDB.get());\n            return ResponseEntity.accepted().headers(headers).body(userFromDB.get());\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(\"login\")\n    public ResponseEntity&lt;User&gt; login(@RequestParam(\"username\")String username, @RequestParam(\"password\")String password){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"login\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;User&gt; loginUser = Optional.ofNullable(userService.logIn(username, password));\n        if(loginUser.isPresent()){\n            return ResponseEntity.accepted().headers(headers).body(loginUser.get());\n        }\n\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n}\n// https://stackoverflow.com/questions/34946237/how-delete-object-in-one-side-at-bidirectional-relation"
  },
  {
    "objectID": "backend/rest-api-controllers.html#boardgamerestcontroller",
    "href": "backend/rest-api-controllers.html#boardgamerestcontroller",
    "title": "REST API controllers",
    "section": "",
    "text": "BoardGameRestController.java\n\npackage org.teamcifo.tindergames.boardGameRestController;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameController;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGameService;\n\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/api/boardgames\")\npublic class BoardGameRestController {\n\n    @Autowired\n    BoardGameService gameService;\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping({\"/\", \"\"})\n    public Iterable&lt;BoardGame&gt; getAllGames(){\n        return gameService.getAllBoardGames();\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"title/{gameTitle}\")\n    public BoardGame getGameByTitle(@PathVariable String gameTitle){\n        Optional&lt;BoardGame&gt; game = Optional.ofNullable(gameService.getGameByGameTitle(gameTitle));\n        if (game.isPresent()){\n            return game.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @GetMapping(\"id/{gameID}\")\n    public BoardGame getGameByID(@PathVariable String gameID){\n        Optional&lt;BoardGame&gt; game = Optional.ofNullable(gameService.getGameByID(gameID));\n        if (game.isPresent()){\n            return game.get();\n        }\n        return null;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PostMapping(path=\"createGame\", consumes = \"application/JSON\")\n    public BoardGame createGame(@RequestBody BoardGame game){\n        BoardGame newGame = gameService.createGame(game);\n        return newGame;\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @DeleteMapping(\"deleteGame\")\n    public ResponseEntity&lt;BoardGame&gt; deleteGame(@RequestParam(\"gameID\") String gameID){\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"deleteGame\");\n        headers.add(\"version\", \"api 1.0\");\n\n        Optional&lt;BoardGame&gt; gameFound = Optional.ofNullable(gameService.getGameByID(gameID));\n        if (gameFound.isPresent()){\n            gameService.deleteGameFromDB(gameFound.get());\n            headers.add(\"operationStatus\", \"deleted\");\n            return ResponseEntity.accepted().headers(headers).body(gameFound.get());\n        }\n        return ResponseEntity.accepted().body(null);\n    }\n\n    @CrossOrigin(origins = \"http://localhost:3000\")\n    @PutMapping(\"updateGame\")\n    public ResponseEntity&lt;BoardGame&gt; updateGame(@RequestBody BoardGame game){\n\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(\"operation\", \"updateGame\");\n        headers.add(\"version\", \"api 1.0\");\n        Optional&lt;BoardGame&gt; gameFromDB= Optional.ofNullable(gameService.getGameByID(game.getGameID()));\n\n        if (gameFromDB.isPresent()){\n            gameService.updateGameFromDB(game);\n            headers.add(\"operationStatus\", \"updated\");\n            return  ResponseEntity.accepted().headers(headers).body(gameService.getGameByID(game.getGameID()));\n        }\n        return ResponseEntity.accepted().headers(headers).body(null);\n    }\n}"
  },
  {
    "objectID": "backend/classes.html",
    "href": "backend/classes.html",
    "title": "Entities",
    "section": "",
    "text": "TODO: Write an introduction to this entry\n\n\n\n\n\n\n\n\npackage org.teamcifo.tindergames.userEntity;\n\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.hibernate.Hibernate;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.gamePlayEntity.Gameplay;\nimport org.teamcifo.tindergames.gamesCollectionEntity.GameStats;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.*;\n\n@AllArgsConstructor\n@Getter\n@Setter\n@ToString\n// JPA annotations\n@Entity(name=\"User\")\n@Table(name=\"USER_TABLE\")\n// annotation that filters recursive on the friends bidirectional relationship\n// link to documentation: https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion#bd-json-identity-info\n\n@JsonIdentityInfo(\n        generator = ObjectIdGenerators.PropertyGenerator.class,\n        property = \"userId\")\npublic class User {\n\n    @Column\n    private String firstName, lastName, email, username;\n    @Column\n    //@JsonIgnore\n    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String password;\n    @Id\n    @GenericGenerator(name=\"system-uuid\", strategy=\"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String userId;\n\n    @OneToMany(cascade = CascadeType.ALL)\n    @JoinTable(name = \"game_statuses_mapping\",\n            joinColumns = {@JoinColumn(name = \"user_id\", referencedColumnName = \"userId\")},\n            inverseJoinColumns = {@JoinColumn(name = \"game_stats_id\", referencedColumnName = \"gameStatsId\")})\n    @MapKeyJoinColumn(name = \"game_id\")\n    @ToString.Exclude\n    private Map&lt;BoardGame, GameStats&gt; userGamesCollection; // Keys are BoardGames\n\n    @ManyToMany\n    @JoinTable(name = \"USER_GAMEPLAY\",\n            joinColumns = @JoinColumn(name = \"USER_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"GAMEPLAY_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;Gameplay&gt; gameplays;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_FRIENDS\",\n            joinColumns = @JoinColumn(name = \"USER_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"FRIEND_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;User&gt; friends;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_FRIENDS\",\n            joinColumns = @JoinColumn(name = \"FRIEND_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"USER_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;User&gt; friendOf;\n\n\n    public User() {\n        this.userId = Helpers.generateUUID();\n        this.gameplays = new HashSet&lt;&gt;();\n        this.friends = new HashSet&lt;&gt;();\n        this.friendOf = new HashSet&lt;&gt;();\n        this.userGamesCollection = new HashMap&lt;&gt;();\n    }\n\n    public User(String firstName, String lastName, String password, String email, String username) {\n        this();\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.password = password;\n        this.email = email;\n        this.username = username;\n    }\n\n    public boolean checkPassword(String password) {\n        return this.getPassword().equals(password);\n    }\n\n    public void addFriend(User friend) {\n        this.friends.add(friend);\n    }\n\n    public void deleteFriend(User friend){\n        this.friends.remove(friend);\n    }\n\n    public void addGameToCollection(BoardGame boardGame) {\n        this.userGamesCollection.putIfAbsent(boardGame, new GameStats());\n    }\n\n    public void deleteGameFromCollection(BoardGame boardGame) {\n        if (this.hasGame(boardGame)) {\n            this.userGamesCollection.remove(boardGame);\n        }\n    }\n\n    public boolean hasGame(BoardGame boardGame) {\n        return this.userGamesCollection.containsKey(boardGame);\n    }\n\n    public Set&lt;User&gt; getFriends(){\n        return this.friends;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;\n        User user = (User) o;\n        return getUserId() != null && Objects.equals(getUserId(), user.getUserId());\n    }\n\n    @Override\n    public int hashCode() {\n        return getClass().hashCode();\n    }\n}\n\n\n\npackage org.teamcifo.tindergames.boardGameEntity;\n\n\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.utils.Helpers;\n\n@Data\n@AllArgsConstructor\n@Entity(name=\"BoardGame\")\n@Table(name=\"BOARDGAME_TABLE\")\n@JsonSerialize\npublic class BoardGame {\n\n    @Id\n    @GenericGenerator(name=\"system-uuid\", strategy=\"uuid\")\n    @Column(name=\"gameID\", updatable=false)\n    private String gameID;\n    @Column(name=\"gameTitle\")\n    private String gameTitle;\n    @Column(name=\"minPlayers\")\n    private int minPlayers;\n    @Column(name=\"maxPlayers\")\n    private int maxPlayers;\n    @Column(name=\"minPlayTime\")\n    private int minPlayTime;\n    @Column(name=\"maxPlayTime\")\n    private int maxPlayTime;\n\n    public BoardGame(String gameTitle){\n        this.gameID = Helpers.generateUUID();\n        this.gameTitle = gameTitle;\n        this.minPlayers = 0;\n        this.maxPlayers = 0;\n        this.minPlayTime = 0;\n        this.maxPlayTime = 0;\n    }\n    public BoardGame(String gameTitle, int minPlayers, int maxPlayers, int minPlayTime, int maxPlayTime){\n        this.gameID = Helpers.generateUUID();\n        this.gameTitle = gameTitle;\n        this.minPlayers = minPlayers;\n        this.maxPlayers = maxPlayers;\n        this.minPlayTime = minPlayTime;\n        this.maxPlayTime = maxPlayTime;\n    }\n\n    public BoardGame(){\n        this.gameID = Helpers.generateUUID();\n    }\n\n    @Override\n    @JsonValue\n    public String toString() {\n        return this.getGameTitle();\n    }\n}\n\n\n\npackage org.teamcifo.tindergames.gamesCollectionEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.Objects;\n\n@Getter\n@Setter\n// JPA annotations\n@Entity(name = \"GameStats\")\n@Table(name = \"GAME_STATS\")\npublic class GameStats {\n    @Id\n    @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String gameStatsId;\n    private double buyPrice;\n    private int numTimesPlayed;\n    private int numWins;\n    private boolean owned;\n\n    public GameStats() {\n        this.gameStatsId = Helpers.generateUUID();\n        this.buyPrice = 0.0;\n        this.numTimesPlayed = 0;\n        this.numWins = 0;\n        this.owned = false;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder stats = new StringBuilder();\n\n        stats.append(\"Price when bought:\\t\").append(this.getBuyPrice());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Number of times played:\\t\").append(this.getNumTimesPlayed());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Number of wins:\\t\").append(this.getNumWins());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Game owned:\\t\").append(this.isOwned());\n        stats.append(System.getProperty(\"line.separator\"));\n\n        return stats.toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof GameStats gameStats)) return false;\n        return Double.compare(gameStats.buyPrice, buyPrice) == 0 && numTimesPlayed == gameStats.numTimesPlayed && numWins == gameStats.numWins && owned == gameStats.owned;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(buyPrice, numTimesPlayed, numWins, owned);\n    }\n}\n\n\n\npackage org.teamcifo.tindergames.gamePlayEntity;\n\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.userEntity.User;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.Set;\n\n// Lombok annotations\n@Getter\n@Setter\n// JPA annotations\n@Entity(name=\"GamePlay\")\n@Table(name=\"GAMEPLAY_TABLE\")\npublic class Gameplay {\n    @Id\n    @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String gameplayId;\n    @ManyToOne\n    @JoinColumn(name = \"gameID\")\n    private BoardGame boardGame;\n    @Column\n    private Long time;\n    @ManyToOne\n    @JoinColumn(name = \"id\")\n    private User winner;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_GAMEPLAY\",\n            joinColumns = @JoinColumn(name = \"GAMEPLAY_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"USER_FK\")\n    )\n    private Set&lt;User&gt; players;\n\n    public Gameplay() {\n        this.gameplayId = Helpers.generateUUID();\n    }\n}"
  },
  {
    "objectID": "backend/classes.html#user",
    "href": "backend/classes.html#user",
    "title": "Entities",
    "section": "",
    "text": "package org.teamcifo.tindergames.userEntity;\n\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.hibernate.Hibernate;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.gamePlayEntity.Gameplay;\nimport org.teamcifo.tindergames.gamesCollectionEntity.GameStats;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.*;\n\n@AllArgsConstructor\n@Getter\n@Setter\n@ToString\n// JPA annotations\n@Entity(name=\"User\")\n@Table(name=\"USER_TABLE\")\n// annotation that filters recursive on the friends bidirectional relationship\n// link to documentation: https://www.baeldung.com/jackson-bidirectional-relationships-and-infinite-recursion#bd-json-identity-info\n\n@JsonIdentityInfo(\n        generator = ObjectIdGenerators.PropertyGenerator.class,\n        property = \"userId\")\npublic class User {\n\n    @Column\n    private String firstName, lastName, email, username;\n    @Column\n    //@JsonIgnore\n    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\n    private String password;\n    @Id\n    @GenericGenerator(name=\"system-uuid\", strategy=\"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String userId;\n\n    @OneToMany(cascade = CascadeType.ALL)\n    @JoinTable(name = \"game_statuses_mapping\",\n            joinColumns = {@JoinColumn(name = \"user_id\", referencedColumnName = \"userId\")},\n            inverseJoinColumns = {@JoinColumn(name = \"game_stats_id\", referencedColumnName = \"gameStatsId\")})\n    @MapKeyJoinColumn(name = \"game_id\")\n    @ToString.Exclude\n    private Map&lt;BoardGame, GameStats&gt; userGamesCollection; // Keys are BoardGames\n\n    @ManyToMany\n    @JoinTable(name = \"USER_GAMEPLAY\",\n            joinColumns = @JoinColumn(name = \"USER_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"GAMEPLAY_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;Gameplay&gt; gameplays;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_FRIENDS\",\n            joinColumns = @JoinColumn(name = \"USER_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"FRIEND_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;User&gt; friends;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_FRIENDS\",\n            joinColumns = @JoinColumn(name = \"FRIEND_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"USER_FK\")\n    )\n    @ToString.Exclude\n    private Set&lt;User&gt; friendOf;\n\n\n    public User() {\n        this.userId = Helpers.generateUUID();\n        this.gameplays = new HashSet&lt;&gt;();\n        this.friends = new HashSet&lt;&gt;();\n        this.friendOf = new HashSet&lt;&gt;();\n        this.userGamesCollection = new HashMap&lt;&gt;();\n    }\n\n    public User(String firstName, String lastName, String password, String email, String username) {\n        this();\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.password = password;\n        this.email = email;\n        this.username = username;\n    }\n\n    public boolean checkPassword(String password) {\n        return this.getPassword().equals(password);\n    }\n\n    public void addFriend(User friend) {\n        this.friends.add(friend);\n    }\n\n    public void deleteFriend(User friend){\n        this.friends.remove(friend);\n    }\n\n    public void addGameToCollection(BoardGame boardGame) {\n        this.userGamesCollection.putIfAbsent(boardGame, new GameStats());\n    }\n\n    public void deleteGameFromCollection(BoardGame boardGame) {\n        if (this.hasGame(boardGame)) {\n            this.userGamesCollection.remove(boardGame);\n        }\n    }\n\n    public boolean hasGame(BoardGame boardGame) {\n        return this.userGamesCollection.containsKey(boardGame);\n    }\n\n    public Set&lt;User&gt; getFriends(){\n        return this.friends;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;\n        User user = (User) o;\n        return getUserId() != null && Objects.equals(getUserId(), user.getUserId());\n    }\n\n    @Override\n    public int hashCode() {\n        return getClass().hashCode();\n    }\n}"
  },
  {
    "objectID": "backend/classes.html#boardgame",
    "href": "backend/classes.html#boardgame",
    "title": "Entities",
    "section": "",
    "text": "package org.teamcifo.tindergames.boardGameEntity;\n\n\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.utils.Helpers;\n\n@Data\n@AllArgsConstructor\n@Entity(name=\"BoardGame\")\n@Table(name=\"BOARDGAME_TABLE\")\n@JsonSerialize\npublic class BoardGame {\n\n    @Id\n    @GenericGenerator(name=\"system-uuid\", strategy=\"uuid\")\n    @Column(name=\"gameID\", updatable=false)\n    private String gameID;\n    @Column(name=\"gameTitle\")\n    private String gameTitle;\n    @Column(name=\"minPlayers\")\n    private int minPlayers;\n    @Column(name=\"maxPlayers\")\n    private int maxPlayers;\n    @Column(name=\"minPlayTime\")\n    private int minPlayTime;\n    @Column(name=\"maxPlayTime\")\n    private int maxPlayTime;\n\n    public BoardGame(String gameTitle){\n        this.gameID = Helpers.generateUUID();\n        this.gameTitle = gameTitle;\n        this.minPlayers = 0;\n        this.maxPlayers = 0;\n        this.minPlayTime = 0;\n        this.maxPlayTime = 0;\n    }\n    public BoardGame(String gameTitle, int minPlayers, int maxPlayers, int minPlayTime, int maxPlayTime){\n        this.gameID = Helpers.generateUUID();\n        this.gameTitle = gameTitle;\n        this.minPlayers = minPlayers;\n        this.maxPlayers = maxPlayers;\n        this.minPlayTime = minPlayTime;\n        this.maxPlayTime = maxPlayTime;\n    }\n\n    public BoardGame(){\n        this.gameID = Helpers.generateUUID();\n    }\n\n    @Override\n    @JsonValue\n    public String toString() {\n        return this.getGameTitle();\n    }\n}"
  },
  {
    "objectID": "backend/classes.html#gamestats",
    "href": "backend/classes.html#gamestats",
    "title": "Entities",
    "section": "",
    "text": "package org.teamcifo.tindergames.gamesCollectionEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.Objects;\n\n@Getter\n@Setter\n// JPA annotations\n@Entity(name = \"GameStats\")\n@Table(name = \"GAME_STATS\")\npublic class GameStats {\n    @Id\n    @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String gameStatsId;\n    private double buyPrice;\n    private int numTimesPlayed;\n    private int numWins;\n    private boolean owned;\n\n    public GameStats() {\n        this.gameStatsId = Helpers.generateUUID();\n        this.buyPrice = 0.0;\n        this.numTimesPlayed = 0;\n        this.numWins = 0;\n        this.owned = false;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder stats = new StringBuilder();\n\n        stats.append(\"Price when bought:\\t\").append(this.getBuyPrice());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Number of times played:\\t\").append(this.getNumTimesPlayed());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Number of wins:\\t\").append(this.getNumWins());\n        stats.append(System.getProperty(\"line.separator\"));\n        stats.append(\"Game owned:\\t\").append(this.isOwned());\n        stats.append(System.getProperty(\"line.separator\"));\n\n        return stats.toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof GameStats gameStats)) return false;\n        return Double.compare(gameStats.buyPrice, buyPrice) == 0 && numTimesPlayed == gameStats.numTimesPlayed && numWins == gameStats.numWins && owned == gameStats.owned;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(buyPrice, numTimesPlayed, numWins, owned);\n    }\n}"
  },
  {
    "objectID": "backend/classes.html#gameplay",
    "href": "backend/classes.html#gameplay",
    "title": "Entities",
    "section": "",
    "text": "package org.teamcifo.tindergames.gamePlayEntity;\n\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.hibernate.annotations.GenericGenerator;\nimport org.teamcifo.tindergames.boardGameEntity.BoardGame;\nimport org.teamcifo.tindergames.userEntity.User;\nimport org.teamcifo.tindergames.utils.Helpers;\n\nimport java.util.Set;\n\n// Lombok annotations\n@Getter\n@Setter\n// JPA annotations\n@Entity(name=\"GamePlay\")\n@Table(name=\"GAMEPLAY_TABLE\")\npublic class Gameplay {\n    @Id\n    @GenericGenerator(name = \"system-uuid\", strategy = \"uuid\")\n    @Column(updatable = false, nullable = false)\n    private String gameplayId;\n    @ManyToOne\n    @JoinColumn(name = \"gameID\")\n    private BoardGame boardGame;\n    @Column\n    private Long time;\n    @ManyToOne\n    @JoinColumn(name = \"id\")\n    private User winner;\n\n    @ManyToMany\n    @JoinTable(name = \"USER_GAMEPLAY\",\n            joinColumns = @JoinColumn(name = \"GAMEPLAY_FK\"),\n            inverseJoinColumns = @JoinColumn(name = \"USER_FK\")\n    )\n    private Set&lt;User&gt; players;\n\n    public Gameplay() {\n        this.gameplayId = Helpers.generateUUID();\n    }\n}"
  },
  {
    "objectID": "design/functional-diagrams.html",
    "href": "design/functional-diagrams.html",
    "title": "Functional diagrams",
    "section": "",
    "text": "Introduction\n\n\n\n\n\n\nTODO: Pending to populate this entry"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TinderGames",
    "section": "",
    "text": "Welcome to the documentation web for our school project on “Matching Table Games between Users and a Library of Table Games.\nThis platform will have a comprehensive library of table games, with information on each game’s rules, objectives, and recommended number of players. Users can browse through the library, learn about new games, and even suggest new games to be added.\nOur user, will can register his games and see stadistic of his plays, in order to check his collection games and his playings of this games. Also, this site will provide a tool to create appointments between users to play together with this games. – Aqui link de los avances practicos de la web. –\nOur team will follow the SCRUM methodology to create this project. So, our team is committed to delivering a high-quality product that meets the needs of our users. We believe with its focus on collaboration, adaptability, and continuous improvement, is the ideal methodology to help us achieve this goal. – Aqui link de la estructura SCRUM. –\nThis documentation web .qmd is designed to keep everyone informed about the project’s progress and to ensure that everyone is on the same page. It will include information on our sprints, user stories, and any important updates or changes to the project. – Aqui link de sprints, user stories, etc.–\nThank you for taking the time to read this introduction, and we look forward to sharing our progress with you."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About us",
    "section": "",
    "text": "We’re a group of students of the CIFO Web applications course with very diverse backgrounds:\n\nVíctor Calbareda:\nDavid Maqueda:\nMarc Palacín: Industrial engineer with a passion for computer science, I’ve been a software engineer for more than 6 years and now I’m gearing towards the DevOps world"
  },
  {
    "objectID": "frontend/mock-up.html",
    "href": "frontend/mock-up.html",
    "title": "Mock-up",
    "section": "",
    "text": "Introduction\n\n\n\n\n\n\nTODO: Pending to populate this entry"
  }
]